# 1. Дан массив целых чисел.
# Написать функцию, которая
#  - вернет True, если 6 является первым или последним элементом массива,
#  - и False в противном случае.
#  Массив минимальной длины 1.

def check_num(arr: list) -> bool:
    return True if arr[0] == 6 or arr[-1] == 6 else False


print(check_num([1, 2, 3, 4, 5, 6]))


# 2. Дано два массива целых чисел. Написать функцию, которая
#  - возвращает true, если их первые или последние элементы равны.
# Оба массива минимальной длины 1.

def check_num2(arr1: list, arr2: list) -> bool:
    return True if arr1[0] == arr2[0] or arr1[-1] == arr2[-1] else False


print(check_num2([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))


# 3. Дан массив целых чисел длины 3. Написать функцию, которая возвращает массив,
# где первый элемент становится последним:
# [1, 2, 3] -> [2, 3, 1]
# [5, 11, 9] -> [11, 9, 5]

def first_to_last(arr: list) -> list:
    arr.append(arr[0])
    del arr[0]
    return arr


print(first_to_last([1, 2, 3]))


# 4. Дан массив целых чисел длины 1 и более.
# Написать функцию, которая возвращает массив длины 2,
# состоящих из первого и последнего элемента входного массива.
#
# [1] -> [1, 1]
# [1, 2, 3] -> [1, 3],
# [7, 4, 6, 2] -> [7, 2]

def extend_list(arr: list) -> list:
    del arr[1:-1]
    return arr


print(extend_list([7, 4, 6, 2]))


# 5. Напишите функцию, которая вернет количество чётных чисел
# в данном массиве."""
#
# # [1, 2, 3, 4, 5]  ->  2

def evens_count(arr: list) -> int:
    return len([1 for e in arr if e % 2 == 0])


print(evens_count([7, 4, 6, 2]))


# 6. Напишите функцию, которая
#  - возвращает сумму элементов массива
#  - и возвращает 0, если массив пустой.
# Так как число 13 приносит неудачу, функция не должна:
#   - учитывать число 13
#   - и последующие за ним числа в массиве.
#
# [1, 2, 2, 1] -> 6,
# [0, 2, 2, 3, 13] -> 7,
# [1, 2, 13, 2, 1] -> 3

def arr_sum(arr: list) -> int:
    if 13 in arr:
        return sum(arr[:arr.index(13)])
    return sum(arr)


print(arr_sum([]))


# 7. Написать функцию, которая возвращает True, если в массиве две двойки идут подряд.
# [1, 2, 2] -> True,
# [2, 1, 2] -> False

def double_two(arr: list) -> bool:
    for i in range(1, len(arr)):
        if arr[i] == arr[i - 1] == 2:
            return True
    return False


print(double_two([1, 2, 1, 2]))


# 8. Поменяйте предыдущую задачу так, чтобы функция
#  - возвращала True если в массиве стоят рядом два любых одинаковых элемента.

def double_num(arr: list) -> bool:
    for i in range(1, len(arr)):
        if arr[i] == arr[i - 1]:
            return True
    return False


print(double_num([1, 2, 1, 3, 3, 2]))


#  9. Дан список чисел. Написать функция, которая возвращает кортеж
# из наибольшего элемента в списке и его индекса.
# Если наибольших элементов несколько, выведите индекс первого из них.

def max_digit(arr: list) -> tuple:
    return max(arr), arr.index(max(arr))


print(max_digit([1, 2, 1, 3, 3, 2]))


# 10. Дан список, упорядоченный по возрастанию.
# Определите, сколько в нём различных элементов.
# Не допускается использование set()
# [1, 2, 2, 3, 3, 3] -> 3
# [1, 1, 1, 1, 1] -> 1
# [] -> 0

def count_distinct(arr: list) -> int:
    temp = []
    for e in arr:
        if e not in temp:
            temp.append(e)
    return len(temp)


print(count_distinct([1, 2, 1, 3, 3, 2]))
